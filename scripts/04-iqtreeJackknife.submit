#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

rangify()
{
	local a b FIRST IFS 
	local -a RANGES
	local RANGE_END=0


	while [ $# -ge 1 ]
	do
		a=${1}
		shift
		b=${1}

		if [[ ${a}+1 -eq ${b} ]]
		then
			if [ ${RANGE_END} -eq 0 ]
			then
				FIRST=${a}
				RANGE_END=1
			fi
		else
			if [ ${RANGE_END} -eq 1 ]
			then
				RANGES+=(${FIRST}-${a})
			else
				RANGES+=(${a})
			fi
			RANGE_END=0
		fi

	done

	IFS=','
	echo "${RANGES[*]}"
}

submitJob()
{
	local JOB_NAME
	local INPUT_ALN
	local MODEL
	local OUTPUT_PFX
	local ARRAY_JOBS
	local JOBS_AT_ONCE

	JOB_NAME="${1}"
	INPUT_ALN="${2}"
	MODEL="${3}"
	OUTPUT_PFX="${4}"
	ARRAY_JOBS="${5}"
	JOBS_AT_ONCE="${6}"

	sbatch \
		-J ${JOB_NAME} \
		--signal=B:USR1@300 \
		--array=${ARRAY_JOBS}%${JOBS_AT_ONCE} \
		--time=1-12:00:00 \
		--nodes=1 \
		--ntasks=16 \
		--mem=24G \
		-o job_files/%x__%A-%a.out \
		-e job_files/%x__%A-%a.err \
		"${SCRIPTS_DIR}"/04-iqtreeJackknife.slurm \
		"${INPUT_ALN}" \
		"${MODEL}" \
		"${OUTPUT_PFX}"
}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

# define key variables
DATA_DIR="data"
JACK_DIR="${DATA_DIR}/jackknife"
INPUT_ALN_DIR="${JACK_DIR}/aln"
OUTPUT_TREE_DIR="${JACK_DIR}/tree"
MODEL="GTR+F+I+G4"
STARTING_POINT=1
REPLICATES=49
JOBS_TO_RUN_AT_ONE_TIME=2

# for each of the taxa
while read FN
do
	TAXON="${FN%.fa}"

	INPUT_ALN="${INPUT_ALN_DIR}/${FN}"
	OUTPUT_TREE_TAXON_DIR="${OUTPUT_TREE_DIR}/${TAXON}"
	OUTPUT_PFX="${OUTPUT_TREE_TAXON_DIR}/tree"

	EXIT_EARLY=0

	# check for existence of needed input files
	INPUT_FILES=("${INPUT_ALN}")

	declare -a NON_EXIST_INPUT_FILES
	for INPUT_FILE in "${INPUT_FILES[@]}"
	do
		if ! [ -e "${INPUT_FILE}" ]
		then
			NON_EXIST_INPUT_FILES+=("${INPUT_FILE}")
		fi
	done

	if [ ${#NON_EXIST_INPUT_FILES} -gt 0 ]
	then
		printf "%s\n" "Some necessary input files did not exist; we will not proceed. The missing files" "are as follows:" 1>&2
		printf "\t\"%s\"\n" "${NON_EXIST_INPUT_FILES[@]}" 1>&2
		EXIT_EARLY=1
	fi
	unset NON_EXIST_INPUT_FILES INPUT_FILES

	# check for existence of expected output files
	OUTPUT_SFXS=({log,ckp.gz,treefile,iqtree})
	declare -a TO_RUN
	for i in `seq ${STARTING_POINT} 1 $((${STARTING_POINT}+${REPLICATES}))`
	do
		for OUTPUT_SFX in "${OUTPUT_SFXS[@]}"
		do
			if [ ! -e "${OUTPUT_PFX}-${i}.${OUTPUT_SFX}" ]
			then
				TO_RUN+=(${i})
				break
			elif [ "${OUTPUT_SFX}" == "ckp.gz" ] && ! zgrep -E '^finished: true' "${OUTPUT_PFX}-${i}.${OUTPUT_SFX}" &> /dev/null
			then
				TO_RUN+=(${i})
				break
			fi
		done
	done

	# skip job submission if range is empty
	if [ ${#TO_RUN[@]} -eq 0 ]
	then
		echo "no jobs to run for ${OUTPUT_PFX}" 1>&2
		continue
	fi

	# create array submission ranges string
	ARRAY_RANGE=`rangify "${TO_RUN[@]}"`
	unset TO_RUN

	# quit early if needed
	if [ $EXIT_EARLY -ne 0 ]
	then
		exit $EXIT_EARLY
	fi


	# ####################### #
	# actually submit the job #
	# ####################### #

	JOB_NAME="taxonJackknife_iqtreeNo${TAXON}"
	submitJob \
		"${JOB_NAME}" \
		"${INPUT_ALN}" \
		"${MODEL}" \
		"${OUTPUT_PFX}" \
		"${ARRAY_RANGE}" \
		"${JOBS_TO_RUN_AT_ONE_TIME}"
	
	#exit $? # stop after first taxa for testing # <-- delete this
	
done < <(find "${INPUT_ALN_DIR}" -type f -name '*.fa' -printf '%f\n' | sort)

