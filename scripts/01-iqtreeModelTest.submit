#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

submitJob()
{
	local SUBMIT
	local JOB_NAME
	local INPUT_ALN
	local OUTPUT_PFX

	SUBMIT="${1}"
	JOB_NAME="${2}"
	INPUT_ALN="${3}"
	OUTPUT_PFX="${4}"

	if [ ${SUBMIT} -eq 0 ]
	then
		printf "%s\n" "Please run the following command locally:"
		printf "\t%s\n" "bash \"${SCRIPTS_DIR}/01-iqtreeModelTest.slurm\" \\"
		printf "\t\t%s\n" "\"${INPUT_ALN}\" \\"
		printf "\t\t%s\n" "\"${OUTPUT_PFX}\""
		printf "\n%s\n" "If you wanted this submitted to the cluster, please re-run this script with the argument \"cluster\"."

	elif [ ${SUBMIT} -eq 1 ]
	then
		sbatch \
			-J ${JOB_NAME} \
			--time=1-00:00:00 \
			--ntasks=16 \
			--nodes=1 \
			--mem=24G \
			-o job_files/%x__%j.out \
			-e job_files/%x__%j.err \
			"${SCRIPTS_DIR}"/01-iqtreeModelTest.slurm \
			"${INPUT_ALN}" \
			"${OUTPUT_PFX}"
	else
		printf "%s\n" "ERROR: submitJob function expected SUBMIT to be 0 or 1." 1>&2
		exit 1
	fi
}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

# check command-line arguments
USE_CLUSTER=0

if [ $# -gt 1 ]
then
	printf "%s\n" "ERROR: This script accepts 0 or 1 arguments. With no arguments, the necessary" "command is printed to stdout. With one argument, and when that argument is" "\"cluster\", the job is submitted with sbatch." 1>&2
	exit 1
elif [ $# -eq 1 ]
then
	if [ "${1}" != "cluster" ]
	then
		printf "%s\n" "ERROR: When providing one argument, it must be \"cluster\"." 1>&2
		exit 1
	fi

	USE_CLUSTER=1
fi

# define key variables
DATA_DIR="data"
INPUT_ALN="${DATA_DIR}/orig/supermatrix_dna.phy"
OUTPUT_PFX="${DATA_DIR}/modelTest/modelTest"
declare -a OUTPUT_FILES

EXIT_EARLY=0

# check for existence of needed input files
INPUT_FILES=("${INPUT_ALN}")

declare -a NON_EXIST_INPUT_FILES
for INPUT_FILE in "${INPUT_FILES[@]}"
do
	if ! [ -e "${INPUT_FILE}" ]
	then
		NON_EXIST_INPUT_FILES+=("${INPUT_FILE}")
	fi
done

if [ ${#NON_EXIST_INPUT_FILES} -gt 0 ]
then
	printf "%s\n" "Some necessary input files did not exist; we will not proceed. The missing files" "are as follows:" 1>&2
	printf "\t\"%s\"\n" "${NON_EXIST_INPUT_FILES[@]}" 1>&2
	EXIT_EARLY=1
fi
unset NON_EXIST_INPUT_FILES INPUT_FILES

# check for existence of expected output files
OUTPUT_FILES=("${OUTPUT_PFX}".{log,{ckp,model}.gz,treefile,iqtree})
declare -a EXIST_OUTPUT_FILES
for OUTPUT_FILE in "${OUTPUT_FILES[@]}"
do
	if [ -e "${OUTPUT_FILE}" ]
	then
		EXIST_OUTPUT_FILES+=("${OUTPUT_FILE}")
	fi
done

if [ ${#EXIST_OUTPUT_FILES} -gt 0 ]
then
	printf "%s\n" "Some output files already existed; we will not continue. If you wish to proceed," "please run the following commands:" 1>&2
	printf "\trm -f \"%s\"\n" "${EXIST_OUTPUT_FILES[@]}" 1>&2
	EXIT_EARLY=1
fi
unset EXIST_OUTPUT_FILES

if [ $EXIT_EARLY -ne 0 ]
then
	exit $EXIT_EARLY
fi


# ####################### #
# actually submit the job #
# ####################### #

JOB_NAME="iqtreeModelTest"
submitJob \
	"${USE_CLUSTER}" \
	"${JOB_NAME}" \
	"${INPUT_ALN}" \
	"${OUTPUT_PFX}"
	

exit $?
